<?php
session_start();
include 'db.php';
include 'csrf_protection.php';
include 'password_security.php'; // ‚úÖ Nowy system bezpiecze≈Ñstwa hase≈Ç
if (!isset($_SESSION['user_id'])) {
    header("Location: login.php");
    exit;
}
    $user_id = $_SESSION['user_id'];
    $success = '';
    $error = '';
    $password_validation = null;
// ‚úÖ Sprawdzenie CSRF dla POST request√≥w
checkCSRFOrDie();
if ($_SERVER["REQUEST_METHOD"] === "POST") {
    $current = $_POST['current_password'];
    $new = $_POST['new_password'];
    $confirm = $_POST['confirm_password'];
    // Sprawdzenie czy nowe has≈Ço i potwierdzenie siƒô zgadzajƒÖ
    if ($new !== $confirm) {
        $error = "Nowe has≈Ço i jego potwierdzenie nie sƒÖ identyczne.";
    } else {
        // Walidacja si≈Çy nowego has≈Ça
        $password_validation = PasswordSecurity::validatePassword($new);
        if (!$password_validation['valid']) {
            $error = "Nowe has≈Ço nie spe≈Çnia wymaga≈Ñ bezpiecze≈Ñstwa:<br>‚Ä¢ " . implode("<br>‚Ä¢ ", $password_validation['errors']);
        } else {
            // Sprawdzenie aktualnego has≈Ça
            $stmt = $conn->prepare("SELECT password_hash FROM users WHERE id = ?");
            $stmt->bind_param("i", $user_id);
            $stmt->execute();
            $result = $stmt->get_result();
            $row = $result->fetch_assoc();
            if (PasswordSecurity::verifyPassword($current, $row['password_hash'])) {
                // Sprawdzenie czy nowe has≈Ço nie jest takie samo jak aktualne
                if (PasswordSecurity::verifyPassword($new, $row['password_hash'])) {
                    $error = "Nowe has≈Ço musi byƒá r√≥≈ºne od aktualnego has≈Ça.";
                } else {
                    // Hash nowego has≈Ça u≈ºywajƒÖc zaawansowanego algorytmu
                    $new_hashed = PasswordSecurity::hashPassword($new);
                    
                    // ‚úÖ NAPRAWKA: Usu≈Ñ nieistniejƒÖcƒÖ kolumnƒô password_changed_at
                    $update = $conn->prepare("UPDATE users SET password_hash = ? WHERE id = ?");
                    $update->bind_param("si", $new_hashed, $user_id);
                    if ($update->execute()) {
                        $success = "Has≈Ço zosta≈Ço pomy≈õlnie zmienione. Si≈Ça has≈Ça: " . 
                                 $password_validation['strength'] . " (" . $password_validation['score'] . "/100 punkt√≥w).";
                        // Wyloguj u≈ºytkownika z innych sesji (opcjonalne)
                        // session_regenerate_id(true);
                        // Log security event
                        error_log("Password changed for user ID: " . $user_id . " at " . date('Y-m-d H:i:s'));
                    } else {
                        $error = "WystƒÖpi≈Ç b≈ÇƒÖd podczas zmiany has≈Ça. Spr√≥buj ponownie.";
                    }
                }
            } else {
                $error = "Nieprawid≈Çowe aktualne has≈Ço.";
                
                // Log failed attempt
                error_log("Failed password change attempt for user ID: " . $user_id . " at " . date('Y-m-d H:i:s'));
            }
        }
    }
}
?>
<!DOCTYPE html>
<html lang="pl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zmie≈Ñ has≈Ço</title>
    <link rel="stylesheet" href="css/style.css">
    <style>
        <?= PasswordSecurity::getPasswordStrengthCSS() ?>
        
        .password-input-group {
            position: relative;
            margin-bottom: 15px;
        }
        .password-toggle {
            position: absolute;
            right: 10px;
            top: 50%;
            transform: translateY(-50%);
            background: none;
            border: none;
            cursor: pointer;
            color: #666;
            font-size: 14px;
        }
        .password-toggle:hover {
            color: #333;
        }
        .form-group {
            margin-bottom: 20px;
        }
        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }
        .form-group input {
            width: 100%;
            padding: 10px;
            border: 2px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }
        .form-group input:focus {
            outline: none;
            border-color: #007bff;
        }
        .password-generator {
            background: #f8f9fa;
            padding: 15px;
            border-radius: 4px;
            margin: 15px 0;
        }
        .password-generator button {
            background: #17a2b8;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin-left: 10px;
        }
        .password-generator button:hover {
            background: #138496;
        }
        .security-tips {
            background: #e9ecef;
            padding: 15px;
            border-radius: 4px;
            margin: 15px 0;
            font-size: 14px;
        }
        .security-tips h4 {
            margin-top: 0;
            color: #495057;
        }
        .security-tips ul {
            margin-bottom: 0;
        }
    </style>
</head>
<body>
<div class="container">
    <h2>Zmie≈Ñ has≈Ço</h2>
    <form method="POST" id="changePasswordForm">
        <?= getCSRFInput() ?>       
        <div class="form-group">
            <label for="current_password">Aktualne has≈Ço:</label>
            <div class="password-input-group">
                <input type="password" id="current_password" name="current_password" required>
                <button type="button" class="password-toggle" onclick="togglePassword('current_password')">üëÅ</button>
            </div>
        </div>
        <div class="form-group">
            <label for="new_password">Nowe has≈Ço:</label>
            <div class="password-input-group">
                <input type="password" id="new_password" name="new_password" required>
                <button type="button" class="password-toggle" onclick="togglePassword('new_password')">üëÅ</button>
            </div>
            <div id="password-strength-indicator" class="password-strength"></div>
        </div>
        <div class="form-group">
            <label for="confirm_password">Potwierd≈∫ nowe has≈Ço:</label>
            <div class="password-input-group">
                <input type="password" id="confirm_password" name="confirm_password" required>
                <button type="button" class="password-toggle" onclick="togglePassword('confirm_password')">üëÅ</button>
            </div>
            <div id="password-match-indicator"></div>
        </div>
        <button type="submit" id="submitBtn" disabled>Zmie≈Ñ has≈Ço</button>
    </form>
    <div class="password-generator">
        <h4>Generator bezpiecznego has≈Ça</h4>
        <input type="text" id="generated-password" readonly style="width: 250px;">
        <button type="button" onclick="generateSecurePassword()">Generuj has≈Ço</button>
        <button type="button" onclick="useGeneratedPassword()">U≈ºyj tego has≈Ça</button>
    </div>
    <div class="security-tips">
        <h4>üîí Wskaz√≥wki bezpiecze≈Ñstwa</h4>
        <ul>
            <li>U≈ºywaj unikalnych hase≈Ç dla ka≈ºdego konta</li>
            <li>Nie udostƒôpniaj swojego has≈Ça nikomu</li>
            <li>Zmieniaj has≈Ço regularnie (co 3-6 miesiƒôcy)</li>
            <li>U≈ºywaj mened≈ºera hase≈Ç do przechowywania r√≥≈ºnych hase≈Ç</li>
            <li>Unikaj u≈ºywania osobistych informacji w ha≈õle</li>
            <li>W≈ÇƒÖcz uwierzytelnianie dwusk≈Çadnikowe gdy to mo≈ºliwe</li>
        </ul>
    </div>
    <?php if ($success): ?>
        <div class="message success">
            <strong>‚úÖ Sukces!</strong><br>
            <?= $success ?>
        </div>
    <?php elseif ($error): ?>
        <div class="message error">
            <strong>‚ùå B≈ÇƒÖd!</strong><br>
            <?= $error ?>
        </div>
    <?php endif; ?>
    <a href="dashboard.php" class="back-link">‚Üê Powr√≥t do panelu</a>
</div>
<script>
    <?= PasswordSecurity::getClientSideValidationJS() ?>
    const newPasswordInput = document.getElementById('new_password');
    const confirmPasswordInput = document.getElementById('confirm_password');
    const submitBtn = document.getElementById('submitBtn');
    const passwordMatchIndicator = document.getElementById('password-match-indicator');
    let passwordValid = false;
    let passwordsMatch = false;

    // Walidacja has≈Ça w czasie rzeczywistym
    newPasswordInput.addEventListener('input', () => {
        const result = updatePasswordIndicator(newPasswordInput.value, 'password-strength-indicator');
        passwordValid = result.valid;
        checkFormValidity();
        checkPasswordMatch();
    });
    // Sprawdzanie zgodno≈õci hase≈Ç
    confirmPasswordInput.addEventListener('input', checkPasswordMatch);
    function checkPasswordMatch() {
        const newPass = newPasswordInput.value;
        const confirmPass = confirmPasswordInput.value;
        if (confirmPass === '') {
            passwordMatchIndicator.innerHTML = '';
            passwordsMatch = false;
        } else if (newPass === confirmPass) {
            passwordMatchIndicator.innerHTML = '<span style="color: green;">‚úì Has≈Ça sƒÖ identyczne</span>';
            passwordsMatch = true;
        } else {
            passwordMatchIndicator.innerHTML = '<span style="color: red;">‚úó Has≈Ça nie sƒÖ identyczne</span>';
            passwordsMatch = false;
        }
        checkFormValidity();
    }
    function checkFormValidity() {
        submitBtn.disabled = !(passwordValid && passwordsMatch && newPasswordInput.value !== '');
    }
    function togglePassword(fieldId) {
        const field = document.getElementById(fieldId);
        const button = field.nextElementSibling;
        if (field.type === 'password') {
            field.type = 'text';
            button.textContent = 'üôà';
        } else {
            field.type = 'password';
            button.textContent = 'üëÅ';
        }
    }
    function generateSecurePassword() {
        // Implementacja generatora hase≈Ç po stronie klienta
        const length = 16;
        const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-=[]{}|;:,.<>?';
        let password = '';
        // Zagwarantuj przynajmniej jeden znak z ka≈ºdej kategorii
        password += getRandomChar('ABCDEFGHIJKLMNOPQRSTUVWXYZ'); // Wielka litera
        password += getRandomChar('abcdefghijklmnopqrstuvwxyz'); // Ma≈Ça litera
        password += getRandomChar('0123456789'); // Cyfra
        password += getRandomChar('!@#$%^&*()_+-=[]{}|;:,.<>?'); // Znak specjalny
        // Dope≈Çnij resztƒô has≈Ça
        for (let i = 4; i < length; i++) {
            password += getRandomChar(charset);
        }
        // Przemieszaj znaki
        password = password.split('').sort(() => Math.random() - 0.5).join('');
        document.getElementById('generated-password').value = password;
    }

    function getRandomChar(charset) {
        return charset.charAt(Math.floor(Math.random() * charset.length));
    }
    function useGeneratedPassword() {
        const generatedPassword = document.getElementById('generated-password').value;
        if (generatedPassword) {
            newPasswordInput.value = generatedPassword;
            confirmPasswordInput.value = generatedPassword;
            
            // Trigger walidacjƒô
            newPasswordInput.dispatchEvent(new Event('input'));
            confirmPasswordInput.dispatchEvent(new Event('input'));
        }
    }
    // Zapobieganie wys≈Çaniu formularza gdy has≈Ça nie sƒÖ prawid≈Çowe
    document.getElementById('changePasswordForm').addEventListener('submit', function(e) {
        if (!passwordValid || !passwordsMatch) {
            e.preventDefault();
            alert('Proszƒô sprawdziƒá wymagania dotyczƒÖce has≈Ça przed kontynuowaniem.');
        }
    });
    // Czyszczenie formularza po udanej zmianie has≈Ça
    <?php if ($success): ?>
    document.getElementById('changePasswordForm').reset();
    document.getElementById('password-strength-indicator').innerHTML = '';
    document.getElementById('password-match-indicator').innerHTML = '';
    <?php endif; ?>
</script>
</body>
</html>